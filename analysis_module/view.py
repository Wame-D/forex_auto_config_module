import logging
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
from .main import main

# Configure logger
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def create_response(status, message, data=None, details=None, http_status=200):
    """
    Helper function to create a structured JSON response.
    """
    response = {
        "status": status,
        "message": message,
        "data": data or [],
    }
    if details:
        response["details"] = details
    
    return JsonResponse(response, status=http_status)

@csrf_exempt
def forex_analysis(request):
    """
    API endpoint to trigger forex analysis and return trading signals.
    """
    try:
        # Log the request details for debugging
        logger.info(f"Received {request.method} request at {request.path} with parameters: {request.GET if request.method == 'GET' else request.POST}")

        # Execute the main forex analysis logic
        signals = main(request)

        # Debugging: Log the signals generated by the main function
        logger.debug(f"Signals generated: {signals}")

        # Check if the signals are returned correctly
        if signals is None or len(signals) == 0:
            logger.warning("No trading signals were generated.")
            return create_response(
                status="success",
                message="No valid trading signals were generated.",
                data=[],
                http_status=200,
            )
        
        # Return the signals if they are present
        return create_response(
            status="success",
            message="Trading signals generated successfully.",
            data=signals,
            http_status=200,
        )

    except Exception as e:
        # Log the exception with full details for better traceability
        logger.exception("An error occurred while generating forex signals.")

        # Return a response with error details; hide sensitive info if not in DEBUG mode
        return create_response(
            status="error",
            message="An internal error occurred while processing your request.",
            details="Internal server error" if not settings.DEBUG else str(e),
            http_status=500,
        )
