import logging
from .data_fetching import fetch_forex_data
from .data_aggregation import aggregate_data
from .strategy_analysis import analyze_malaysian_strategy
from datetime import datetime, timedelta
import pytz 
import asyncio

# Configure logging
logging.basicConfig(level=logging.INFO)

# Define the CAT timezone
cat_timezone = pytz.timezone("Africa/Harare")

async def main():
    """
    Main function to fetch, aggregate, and analyze forex data.

    Args:
        request: The request object (or None during testing).
    
    Returns:
        signals: Trading signals generated by strategy analysis.
    """
    """
        Adding infinite loop to fetch data at every 4hrs
        continuosly
    """
    while True:
        # Get the current time in UTC and align to the start of the current minute
        now_utc = datetime.utcnow()
        aligned_time = now_utc.replace(second=0, microsecond=0)

        # Convert aligned_time to CAT timezone for display
        aligned_time_cat = aligned_time.astimezone(cat_timezone)

        # Fetch data
        df_minute = fetch_forex_data()
        if df_minute is None:
            logging.error("Failed to fetch forex data.")
            return None

        # Aggregate data
        df_4h = aggregate_data(df_minute, "4H")
        df_15m = aggregate_data(df_minute, "15M")

        # Analyze strategy
        signals = analyze_malaysian_strategy(df_4h, df_15m)

        # Output signals
        if signals:
            logging.info("Trading Signals: %s", signals)
        else:
            logging.info("No trading signals generated.")

        # return signals
        print("the method called succseesfully")
        print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
        print(signals)
        print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
    
        # Calculate sleep duration
        next_minute = aligned_time + timedelta(minutes=1)
        calculated_sleep_duration = (next_minute - datetime.utcnow()).total_seconds()

        # Minimum sleep duration is 4 hours for production
        # minimum_sleep_duration = 4 * 60 * 60  # 4 hours in seconds
        #15 minutes only fot testing purposes
        minimum_sleep_duration = 15 * 60

        # Ensure the sleep duration is at least 4 hours
        sleep_duration = max(minimum_sleep_duration, calculated_sleep_duration)

        # Display sleep duration and perform the sleep
        if sleep_duration > 0:
            print(f"Sleeping for {sleep_duration} seconds...")
            await asyncio.sleep(sleep_duration)

# invocation
if __name__ == "__main__":
    main()